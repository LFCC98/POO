#BlueJ class context
comment0.target=Sistema
comment1.params=
comment1.target=Sistema()
comment1.text=Constroi\ um\ novo\ sistema\ "vazio"
comment10.params=
comment10.target=java.util.List\ getNatureza()
comment10.text=\n\ Metodo\ que\ retorna\ a\ lista\ de\ naturezas\ do\ Sistema\n\ @return\ as\ Naturezas\ atuais\ do\ sistema\n
comment11.params=n
comment11.target=void\ setNatureza(java.util.List)
comment11.text=\n\ Metodo\ que\ altera\ o\ Set\ de\ naturezas\n\ @param\ n\ novos\ valores\ das\ naturezas\n
comment12.params=
comment12.target=Administrador\ getAdministrador()
comment12.text=\n\ Metodo\ que\ retorna\ o\ administrador\ atual\ do\ sistema\n\ @return\ o\ administrador\ atual\ do\ sistema\n
comment13.params=a
comment13.target=void\ setAdministrador(Administrador)
comment13.text=\n\ Metodo\ que\ altera\ o\ administrador\n\ @param\ a\ Novos\ valores\ do\ administrador\n
comment14.params=
comment14.target=Sistema\ clone()
comment14.text=\n\ Metodo\ que\ faz\ uma\ copia\ do\ sitema\n\ @return\ uma\ copia\ do\ Sistema\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\n\ Metodo\ que\ retorna\ todo\ o\ sistema\ numa\ String\n\ \ @return\ String\ do\ sistema\n
comment16.params=o
comment16.target=boolean\ equals(java.lang.Object)
comment16.text=\n\ Metodo\ que\ compara\ se\ dois\ sistemas\ sao\ iguais\n\ @param\ o\ Object\ que\ ira\ ser\ comparado\ com\ o\ sistema\n\ @return\ um\ boolean\ que\ corresponde\ a\ igualdade\ entre\ os\ dois\ sistemas\n
comment17.params=n
comment17.target=void\ adicionaNatureza(Natureza)
comment17.text=\n\ Metodo\ que\ adiciona\ uma\ Natureza\ ao\ Sistema\n\ @param\ n\ Natureza\ que\ ira\ ser\ adicionada\ ao\ sistema\n
comment18.params=conta
comment18.target=boolean\ existeNIF(int)
comment18.text=\n\ Metodo\ que\ verifica\ se\ existe\ alguma\ entidade\ com\ um\ certo\ NIF\n\ @param\ conta\ Identificador\ da\ entidade\ que\ ir\u00E1\ ser\ procurada\n\ @return\ um\ boolean\ que\ corresponde\ a\ existencia\ de\ um\ NIF\ no\ sistema\n
comment19.params=c
comment19.target=void\ adicionaIndividuo(Individuos)
comment19.text=\n\ Metodo\ que\ adiciona\ um\ Individuo\ ao\ Sistema\n\ @param\ c\ Individuo\ que\ ira\ ser\ adicionada\ ao\ sistema\n
comment2.params=m\ f\ info\ n\ a
comment2.target=Sistema(java.util.Map,\ java.util.Map,\ java.util.Map,\ java.util.List,\ Administrador)
comment2.text=Constroi\ um\ novo\ sistema\ com\ as\ variaveis\ dos\ argumentos
comment20.params=c
comment20.target=void\ adicionaEmpresas(Empresas)
comment20.text=\n\ Metodo\ que\ adiciona\ uma\ Empresa\ ao\ Sistema\n\ @param\ c\ Empresa\ que\ ira\ ser\ adicionada\ ao\ sistema\n
comment21.params=f
comment21.target=void\ adicionaFatura(Fatura)
comment21.text=\n\ Metodo\ que\ adiciona\ uma\ Fatura\ ao\ Sistema\n\ @param\ f\ Fatura\ que\ sera\ adicionada\ ao\ sistema\n
comment22.params=conta\ addN
comment22.target=void\ addAgregado(int,\ int)
comment22.text=\n\ Metodo\ que\ adiciona\ um\ agregado\ familiar\n\ @param\ conta\ NIF\ que\ se\ pretende\ adicionar\ um\ agregado\ familiar\n\ @param\ addN\ NIF\ que\ se\ pretende\ adicionar\ um\ agregado\ familiar\n
comment23.params=conta\ passe
comment23.target=boolean\ validaAcesso(int,\ java.lang.String)
comment23.text=\n\ Metodo\ que\ verifica\ se\ um\ utilizador\ consegue\ ter\ acesso\ aos\ dados\ \n\ @param\ Id\ Identificador\ da\ entidade\ que\ ira\ tentar\ ter\ acesso\ aos\ dados\n\ @param\ passe\ Palavra\ chave\ do\ utilizador\ com\ NIF\ Id\n\ @return\ um\ boolean\ que\ corresponde\ se\ a\ entidade\ conseguiu\ entrar\ no\ sistema\n
comment24.params=conta
comment24.target=java.util.Set\ listaFaturasEmpresas(int)
comment24.text=\n\ Metodo\ que\ retorna\ a\ lista\ de\ faturas\ de\ uma\ empresa\n\ @param\ Id\ Identificador\ da\ empresa\n\ @return\ um\ Set\ de\ faturas\ de\ uma\ determinada\ Empresa\n
comment25.params=conta
comment25.target=java.util.Set\ listaFaturasContribuintes(int)
comment25.text=\n\ Metodo\ que\ retorna\ a\ lista\ de\ faturas\ de\ um\ contribuinte\ \n\ @param\ Id\ Identificador\ do\ contribuinte\n\ @return\ um\ Set\ de\ faturas\ de\ um\ determinado\ Individuo\n
comment26.params=conta
comment26.target=boolean\ existeEmpresa(int)
comment26.text=\n\ Metodo\ que\ verifica\ se\ existe\ alguma\ Empresa\ no\ sistema\n\ @param\ Id\ Identificador\ da\ empresa\ que\ ira\ ser\ procurada\ no\ sitema\n\ @return\ um\ boolean\ que\ corresponde\ a\ existencia\ da\ empresa\ no\ sistema\n
comment27.params=conta
comment27.target=boolean\ existeIndividuo(int)
comment27.text=\n\ Metodo\ que\ verifica\ se\ existe\ algum\ individuo\ no\ sistema\ com\ um\ determinado\ identificador\n\ @param\ conta\ Identificador\ do\ individuo\ que\ ira\ ser\ procurada\ no\ sitema\n\ @return\ um\ boolean\ que\ corresponde\ a\ existencia\ do\ individuo\ no\ sistema\n
comment28.params=Id
comment28.target=boolean\ existeFaturaId(java.lang.String)
comment28.text=\n\ Metodo\ que\ verifica\ se\ existe\ alguma\ Fatura\ no\ sistema\ com\ um\ determinado\ identificador\n\ @param\ Id\ Identificador\ da\ fatura\ que\ ira\ ser\ procurada\ no\ sitema\n\ @return\ um\ boolean\ que\ corresponde\ a\ existencia\ da\ fatura\ no\ sistema\n
comment29.params=id\ nif
comment29.target=Fatura\ getFatura(java.lang.String,\ java.lang.Integer)
comment29.text=\n\ Metodo\ que\ retorna\ uma\ Fatura\ \n\ @param\ id\ Identificador\ da\ fatura\ que\ se\ pretende\ retornar\n\ @param\ nif\ Fatura\ esta\ associadda\ a\ este\ nif\n\ @return\ uma\ Fatura\n
comment3.params=s
comment3.target=Sistema(Sistema)
comment3.text=Constroi\ um\ novo\ sistema
comment30.params=id\ e
comment30.target=Fatura\ getFatura(java.lang.String,\ Empresas)
comment31.params=nif
comment31.target=java.util.Set\ getFaturasEmpresas(int)
comment32.params=s
comment32.target=Natureza\ getAtividade(java.lang.String)
comment32.text=\n\ Metodo\ que\ retorna\ uma\ natureza\ dado\ uma\ string\n\ @param\ s\ Tipo\ da\ natureza\ que\ se\ pretende\ retornar\n\ @return\ uma\ Natureza\n
comment33.params=s\ n\ nif
comment33.target=void\ validaFatura(java.lang.String,\ Natureza,\ int)
comment33.text=\n\ Metodo\ que\ um\ dado\ contribuinte\ escolhe\ qual\ a\ natureza\ da\ fatura\n\ @param\ s\ Lista\ das\ Naturezas\ em\ que\ se\ pretende\ alterar\ para\ apenas\ uma\n\ @param\ x\ Natureza\ que\ sera\ a\ escolhida\ pelo\ contribuinte\ \n
comment34.params=s\ f
comment34.target=void\ alteraNatureza(java.lang.String,\ Fatura)
comment34.text=\n\ Metodo\ que\ altera\ uma\ natureza\ de\ uma\ fatura\ que\ ja\ foi\ escolhida\ qual\ a\ sua\ natureza\n\ @param\ s\ Natureza\ que\ vai\ ser\ alterada\n\ @param\ Fatura\ que\ vai\ ser\ alterada\n
comment35.params=conta\ begin\ end
comment35.target=double\ valorTotalEmpresasTempo(int,\ java.time.LocalDate,\ java.time.LocalDate)
comment35.text=\n\ Metodo\ que\ calcula\ o\ valor\ total\ de\ uma\ empresa\ num\ determinado\ intervalo\ de\ tempo\n\ @param\ conta\ Identificador\ da\ empresa\ que\ se\ pretende\ calcular\ o\ valor\ total\n\ @param\ begin\ Todas\ as\ faturas\ tem\ que\ ser\ posteriores\ a\ esta\ data\n\ @param\ end\ Todas\ as\ faturas\ tem\ que\ ser\ anteriores\ a\ esta\ data\n\ @return\ um\ double\ com\ o\ valor\ total\ de\ uma\ empresa\ num\ determinado\ intervalo\ de\ tempo\n
comment36.params=conta\ begin\ end
comment36.target=double\ valorTotalTempo(int,\ java.time.LocalDate,\ java.time.LocalDate)
comment36.text=\n\ Metodo\ que\ calcula\ o\ valor\ total\ de\ um\ contribuinte\ num\ determinado\ espa\u00E7o\ de\ tempo\ \n\ @param\ conta\ Identificador\ da\ um\ contribuinte\ que\ se\ pretende\ ordenar\ as\ faturas\n\ @param\ begin\ Todas\ as\ faturas\ tem\ que\ ser\ posteriores\ a\ esta\ data\n\ @param\ end\ Todas\ as\ faturas\ tem\ que\ ser\ anteriores\ a\ esta\ data\n\ @return\ um\ double\ com\ valor\ total\ num\ determinado\ espa\u00E7o\ de\ tempo\n
comment37.params=conta
comment37.target=double\ valorTotalEmpresa(int)
comment37.text=\n\ Metodo\ que\ calcula\ o\ valor\ total\ de\ uma\ empresa\ de\ sempre\n\ @param\ conta\ Identificador\ da\ empresa\ que\ se\ pretende\ calcular\ o\ valor\ total\ das\ faturas\ que\ passou\ de\ sempre\n\ @return\ um\ double\ com\ o\ valor\ total\ da\ empresa\n
comment38.params=conta
comment38.target=double\ valorTotal(int)
comment38.text=\n\ Metodo\ que\ calcula\ o\ valor\ total\ de\ todas\ as\ faturas\ de\ uma\ identidade\n\ @param\ conta\ Identificador\ que\ se\ pretende\ calcular\ o\ valor\ total\n\ @return\ double\ com\ o\ valor\ total\ de\ uma\ entidade\ \ \n
comment39.params=conta
comment39.target=double\ valorTotalFam(int)
comment39.text=\n\ Metodo\ que\ calcula\ o\ valor\ total\ da\ familia\ \n\ @param\ conta\ Identificador\ do\ contribuinte\ que\ se\ pretende\ calcular\ o\ valor\ total\ do\ agregado\ familiar\ \n\ @return\ um\ double\ com\ o\ valor\ total\ do\ agregado\ familiar\n
comment4.params=
comment4.target=java.util.Map\ getSistema()
comment4.text=\n\ Metodo\ que\ retorna\ o\ sistema\ das\ faturas\ dos\ individuos\ \n\ @return\ as\ Faturas\ dos\ Individuos\ do\ sistema\n
comment40.params=conta\ begin\ end
comment40.target=double\ valorTotalDeduzidoTempo(int,\ java.time.LocalDate,\ java.time.LocalDate)
comment40.text=\n\ Metodo\ que\ calcula\ o\ valor\ total\ deduzido\ num\ certo\ intervalo\ de\ tempo\n\ @param\ conta\ Identificador\ de\ uma\ entidade\ que\ se\ pretende\ deduzir\n\ @param\ begin\ Todas\ as\ faturas\ tem\ que\ ser\ posteriores\ a\ esta\ data\n\ @param\ end\ Todas\ as\ faturas\ tem\ que\ ser\ anteriores\ a\ esta\ data\n\ @return\ um\ double\ com\ o\ valor\ que\ vai\ ser\ deduzido\ num\ intervalo\ de\ tempo\n
comment41.params=conta
comment41.target=double\ custoTotalIndividuo(int)
comment42.params=conta
comment42.target=java.util.Set\ ordenaValor(int)
comment42.text=\n\ Metodo\ que\ ordena\ por\ valor\ as\ faturas\ de\ uma\ empresa\n\ @param\ conta\ Identificador\ da\ empresa\ que\ se\ pretende\ ordenar\ as\ faturas\n\ @return\ uma\ Lista\ de\ faturas\ ordenadas\ por\ valor\n
comment43.params=conta
comment43.target=java.util.Set\ ordenaData(int)
comment43.text=\n\ Metodo\ que\ ordena\ por\ data\ de\ emissao\ as\ fauras\ de\ uma\ empresas\n\ @param\ conta\ Identificador\ da\ empresa\ que\ se\ pretende\ ordenar\ as\ faturas\n\ @return\ uma\ Lista\ de\ faturas\ ordenadas\ por\ data\n
comment44.params=conta\ begin\ end
comment44.target=java.util.Set\ ordenaContribuinte(int,\ java.time.LocalDate,\ java.time.LocalDate)
comment44.text=\n\ Metodo\ que\ ordena\ por\ contribuinte\ as\ faturas\ de\ uma\ empresa\ num\ determinado\ intervalo\ de\ tempo\n\ @param\ conta\ Identificador\ da\ empresa\ que\ se\ pretende\ ordenar\ as\ faturas\n\ @param\ begin\ Todas\ as\ faturas\ tem\ que\ ser\ posteriores\ a\ esta\ data\n\ @param\ end\ Todas\ as\ faturas\ tem\ que\ ser\ anteriores\ a\ esta\ data\n\ @return\ uma\ Lista\ de\ faturas\ ordenadas\ por\ contribuinte\n
comment45.params=conta
comment45.target=java.util.Set\ ordenaContribuinteValor(int)
comment45.text=\n\ Metodo\ que\ dada\ um\ NIF\ de\ uma\ empresa\ ordena\ as\ faturas\ por\ contribuinte\ e\ no\ caso\ de\ serem\ do\ mesmo\ contribuinte\ ordena\ por\ valor\ \n\ @param\ conta\ Identificador\ da\ empresa\ que\ se\ pretende\ ordenar\ as\ faturas\n\ @return\ um\ Sistema\n
comment46.params=
comment46.target=java.util.Set\ top10Contribuintes()
comment46.text=\n\ Metodo\ que\ calcula\ os\ 10\ contribuintes\ que\ masi\ gastaram\ em\ todo\ o\ sistema\n\ @return\ um\ ArrayList\ com\ a\ identificacao\ dos\ 10\ contribuintes\ que\ mais\ gastaram\n
comment47.params=NIF
comment47.target=java.util.Set\ faturaPorValidar(int)
comment47.text=\n\ \ \ \ public\ ArrayList<Entidades>\ topXEmpresas(int\ x,\ LocalDate\ begin,\ LocalDate\ end)\ throws\ NaoExisteNIFException,\ NaoExisteFaturaException{\n\ \ \ \ ArrayList<Entidades>\ id\ \=\ new\ ArrayList<>(x);\n\ \ \ \ Set<Integer>\ s\ \=\ empFaturas.keySet();\n\ \ \ \ boolean\ b;\n\ \ \ \ for(Integer\ i\:\ s){\n\ \ \ \ try{\n\ \ \ \ b\ \=\ valorTotalEmpresasTempo(i,\ begin,\ end)\ >\ valorTotalEmpresasTempo(id.get(x\ -\ 1).getNIF(),\ begin,\ end);\n\ \ \ \ if(info.get(i)\ instanceof\ Empresas\ &&\ b){\n\ \ \ \ id.set(x\ -\ 1,\ info.get(i));\n\ \ \ \ id.sort((Entidades\ e1,\ Entidades\ e2)\ ->\ valorTotalEmpresa(e1.getNIF())\ -\ valorTotalEmpresa(e2.getNIF()));\n\ \ \ \ }\n\ \ \ \ }\ \ \ \ \ \ \ \ \ \ \ \n\ \ \ \ catch(NaoExisteNIFException\ e){\n\ \ \ \ throw\ new\ NaoExisteNIFException(e.getMessage());\ \n\ \ \ \ }\n\ \ \ \ catch(NaoExisteFaturaException\ e){\n\ \ \ \ throw\ new\ NaoExisteFaturaException(e.getMessage());\n\ \ \ \ }\n\ \ \ \ }\n\ \ \ \ return\ id;\n\ \ \ \ }\n
comment48.params=e1\ e2
comment48.target=int\ compareValorEmpresa(Empresas,\ Empresas)
comment48.text=\n\ Metodo\ que\ comparara\ o\ valor\ de\ duas\ empresas\ \n\ @param\ e1\ Empresa\ que\ vai\ ser\ comparada\n\ @param\ e2\ Empresa\ que\ vai\ ser\ comparada\n\ @return\ -1,\ 0\ ou\ 1\ consoante\ o\ valor\ das\ duas\ empresas\n
comment49.params=e
comment49.target=int\ compareToValorEmpresa(Empresas)
comment5.params=m
comment5.target=void\ SetSistema(java.util.Map)
comment5.text=\n\ Metodo\ que\ altera\ o\ Set\ de\ faturas\ dos\ individuos\ \n\ @param\ m\ O\ set\ das\ faturas\ dos\ individuos\ serao\ alterados\ para\ estes\ valores\n
comment50.params=nomeFicheiro
comment50.target=void\ guardaEstado(java.lang.String)
comment50.text=\n\ Metodo\ que\ guarda\ num\ ficheiro\ um\ Sistema\ que\ contem\ todas\ as\ faturas,\ Contribuintes\ e\ Empresas\n
comment51.params=nomeFicheiro
comment51.target=Sistema\ carregaEstado(java.lang.String)
comment51.text=\n\ Metodo\ que\ carrega\ de\ um\ ficheiro\ um\ Sistema\ com\ todas\ as\ faturas,\ Contribuintes\ e\ Empresas\ \n\ @param\ nomeFicheiro\ Ficheiro\ em\ que\ estao\ guardadas\ as\ informa\u00E7\u00F5es\ sobre\ o\ sistema\n\ @return\ um\ Sistema\n
comment6.params=
comment6.target=java.util.Map\ getEmpFaturas()
comment6.text=\n\ Metodo\ que\ retorna\ o\ Set\ de\ faturas\ das\ empresas\n\ @return\ o\ Set\ de\ faturas\ das\ Empresas\n
comment7.params=m
comment7.target=void\ setEmpFaturas(java.util.Map)
comment7.text=\n\ Metodo\ que\ altera\ os\ Set\ das\ faturas\ das\ empresas\n\ @param\ m\ o\ Set\ das\ faturas\ das\ empresas\ serao\ alteradas\ para\ estes\ valores\n
comment8.params=
comment8.target=java.util.Map\ getInfo()
comment8.text=\n\ Metodo\ que\ retorna\ um\ Map\ sobre\ a\ informa\u00E7\u00E3o\ das\ entidades\ do\ sistema\n\ @return\ as\ informa\u00E7\u00F5es\ sobre\ as\ Entidades\n
comment9.params=e
comment9.target=void\ setInfo(java.util.Map)
comment9.text=\n\ Metodo\ que\ altera\ as\ entidades\ do\ sistema\n\ @param\ e\ Novos\ entidades\ do\ sistema\n
numComments=52
